---
// Advanced Content Recommendation Engine
import { getCollection } from 'astro:content';

const allPosts = await getCollection('posts');
const currentUrl = Astro.url.pathname;

// Get related posts based on content similarity
function getRelatedPosts(currentPost, allPosts, limit = 3) {
  if (!currentPost) return allPosts.slice(0, limit);
  
  const currentTags = currentPost.data.tags || [];
  const currentCategory = currentPost.data.category || '';
  
  return allPosts
    .filter(post => post.slug !== currentPost.slug)
    .map(post => {
      let score = 0;
      const postTags = post.data.tags || [];
      const postCategory = post.data.category || '';
      
      // Category match (high weight)
      if (postCategory === currentCategory) score += 10;
      
      // Tag matches (medium weight)
      const tagMatches = postTags.filter(tag => currentTags.includes(tag));
      score += tagMatches.length * 5;
      
      // Language preference (bonus)
      if (post.data.language === currentPost.data.language) score += 3;
      
      return { post, score };
    })
    .sort((a, b) => b.score - a.score)
    .slice(0, limit)
    .map(item => item.post);
}

// Get trending posts (recent posts with high engagement simulation)
function getTrendingPosts(allPosts, limit = 4) {
  return allPosts
    .filter(post => {
      const postDate = new Date(post.data.pubDate);
      const daysDiff = (Date.now() - postDate.getTime()) / (1000 * 60 * 60 * 24);
      return daysDiff <= 7; // Posts from last 7 days
    })
    .sort((a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate))
    .slice(0, limit);
}

const { currentPost, type = 'related' } = Astro.props;
const recommendations = type === 'trending' ? 
  getTrendingPosts(allPosts) : 
  getRelatedPosts(currentPost, allPosts);
---

<div class="recommendations-container">
  <h3 class="recommendations-title">
    {type === 'trending' ? 'üî• Trending Now' : 'üìö You Might Also Like'}
  </h3>
  
  <div class="recommendations-grid">
    {recommendations.map((post) => (
      <article class="recommendation-card" data-post-id={post.slug}>
        <a href={`/posts/${post.slug}`} class="card-link">
          <div class="card-content">
            <div class="card-emoji">{post.data.emoji || 'üß†'}</div>
            <h4 class="card-title">{post.data.title}</h4>
            <p class="card-description">{post.data.description}</p>
            <div class="card-meta">
              <span class="reading-time">‚è±Ô∏è {post.data.readingTime || '2-3'} min read</span>
              <span class="category">#{post.data.category || 'knowledge'}</span>
            </div>
          </div>
        </a>
      </article>
    ))}
  </div>
</div>

<style>
  .recommendations-container {
    margin: 3rem 0;
    padding: 2rem;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border-radius: 1rem;
    border: 1px solid #e2e8f0;
  }

  .recommendations-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .recommendation-card {
    background: white;
    border-radius: 0.75rem;
    overflow: hidden;
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .recommendation-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    border-color: #9333ea;
  }

  .card-link {
    text-decoration: none;
    color: inherit;
  }

  .card-content {
    padding: 1.5rem;
  }

  .card-emoji {
    font-size: 2rem;
    margin-bottom: 1rem;
    text-align: center;
  }

  .card-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.75rem;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-description {
    font-size: 0.875rem;
    color: #6b7280;
    line-height: 1.5;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.75rem;
    color: #9ca3af;
  }

  .category {
    background: #9333ea;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .recommendations-container {
      margin: 2rem 0;
      padding: 1.5rem;
    }

    .recommendations-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .card-content {
      padding: 1.25rem;
    }
  }
</style>

<script>
  // Track recommendation clicks for analytics
  document.querySelectorAll('.recommendation-card').forEach(card => {
    card.addEventListener('click', (e) => {
      const postId = card.dataset.postId;
      
      // Track recommendation click
      if (typeof gtag !== 'undefined') {
        gtag('event', 'recommendation_click', {
          'event_category': 'engagement',
          'event_label': postId,
          'custom_parameter': 'content_recommendation'
        });
      }

      // Store in localStorage for analytics
      const analytics = JSON.parse(localStorage.getItem('mindpulse_analytics') || '{}');
      analytics.recommendationClicks = (analytics.recommendationClicks || 0) + 1;
      analytics.lastRecommendationClick = {
        postId: postId,
        timestamp: Date.now()
      };
      localStorage.setItem('mindpulse_analytics', JSON.stringify(analytics));
    });
  });
</script>
